[{"content":"前言 一次调试时，发现 Firefox 中可以通过 boolean 值来使用 Array.sort()，而在 Node.js 中仅能使用 number 类型。尽管这个问题没有造成代码错误，但还是会造成一些困惑。\nJS 引擎间差异 简单运行下测试代码，结果如下：\n Firefox  const arr = [{num:1}, {num:3}, {num:2}] const numSorted = arr.sort((a, b) =\u0026gt; a.num - b.num) console.log(numSorted) \u0026gt; Array [Object { num: 1 }, Object { num: 2 }, Object { num: 3 }] const arr = [{num:1}, {num:3}, {num:2}] const boolSorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(boolSorted) \u0026gt; Array [Object { num: 1 }, Object { num: 2 }, Object { num: 3 }]  Node.js  const arr = [{num:1}, {num:3}, {num:2}] const sorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(sorted) \u0026gt; [ { num: 1 }, { num: 3 }, { num: 2 } ]  Deno  const arr = [{num:1}, {num:3}, {num:2}] const sorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(sorted) \u0026gt; [ { num: 1 }, { num: 3 }, { num: 2 } ] 可以发现，Node 与 Deno 同样使用 V8 引擎，仅能在 Array.sort()中使用 number 类型作为判断，而 Firefox 中能够使用 number 或 boolean 值作为判断。\nTypeScript 中 Array.sort()的类型 在 TypeScript 中 Array.sort()的类型为\n(method) Array\u0026lt;T\u0026gt;.sort(compareFn?: ((a: T, b: T) =\u0026gt; number) | undefined): T[] 尝试使用 boolean 类型的 sort(),但 TS 报出类型错误:\nArgument of type \u0026#39;(a: { num: number; }, b: { num: number; }) =\u0026gt; boolean\u0026#39; is not assignable to parameter of type \u0026#39;(a: { num: number; }, b: { num: number; }) =\u0026gt; number\u0026#39;. Type \u0026#39;boolean\u0026#39; is not assignable to type \u0026#39;number\u0026#39;.ts(2345) MDN 文档与 ECMA 标准 查阅 MDN 文档1，\n So, the compare function has the following form:\nfunction compare(a, b) { if (a is less than b by some ordering criterion) { return -1; } if (a is greater than b by the ordering criterion) { return 1; } // a must be equal to b return 0; }  说明中并未标明可以使用 boolean 值，继续查阅 ECMA 文档2,\n  If x and y are both undefined, return +0𝔽. If x is undefined, return 1𝔽. If y is undefined, return -1𝔽. If comparefn is not undefined, then  Let v be ? ToNumber(? Call(comparefn, undefined, « x, y »)). If v is NaN, return +0𝔽. Return v.   Let xString be ? ToString(x). Let yString be ? ToString(y). Let xSmaller be ! IsLessThan(xString, yString, true). If xSmaller is true, return -1𝔽. Let ySmaller be ! IsLessThan(yString, xString, true). If ySmaller is true, return 1𝔽. Return +0𝔽.   标准中同样也未指出可以使用 boolean 值进行判断。\n总结 Firefox 中能够使用 boolean 值进行判断，可能是 Firefox 的实现问题，在相关文档与标准中并没有相关说明。实际写代码时，在 lint 工具等约束后应该并不会产生异常问题，仅是出于好奇进行了一些检索，简单记录一下。\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.sort\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://jasondg.github.io/posts/firefox.sort.by.boolean/","summary":"前言 一次调试时，发现 Firefox 中可以通过 boolean 值来使用 Array.sort()，而在 Node.js 中仅能使用 number 类型。尽管这个问题没有造成代码错误，但还是会造成一些困","title":"Firefox 中 Array.sort() 能够使用 boolean 值进行判断"},{"content":"Hello world 突然萌生了一个念头，想着可以写写博客，简单地记录一点平时的所见所思。\n近来看过的东西不少，积累下来的却不多。博客也就权当是备忘录了，写一写，记一记，兴许能多积累些。即便没什么获益，以后再看，也算是一些回忆了。\n以此自勉。\n","permalink":"https://jasondg.github.io/posts/0/","summary":"\u003ch1 id=\"hello-world\"\u003eHello world\u003c/h1\u003e","title":"0"}]