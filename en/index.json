[{"content":"Once I was debugging, I found that in Firefox Array.sort() can take boolean values in addition to number values. However, in Node.js Array.sort() only supports number values. Although it didn\u0026rsquo;t cause bugs, I\u0026rsquo;m curious about the difference.\nDifference between JS engines Here are some tests:\nFirefox const arr = [{num:1}, {num:3}, {num:2}] const numSorted = arr.sort((a, b) =\u0026gt; a.num - b.num) console.log(numSorted) \u0026gt; Array [Object { num: 1 }, Object { num: 2 }, Object { num: 3 }] const arr = [{num:1}, {num:3}, {num:2}] const boolSorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(boolSorted) \u0026gt; Array [Object { num: 1 }, Object { num: 2 }, Object { num: 3 }] Node.js const arr = [{num:1}, {num:3}, {num:2}] const sorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(sorted) \u0026gt; [ { num: 1 }, { num: 3 }, { num: 2 } ] Deno const arr = [{num:1}, {num:3}, {num:2}] const sorted = arr.sort((a, b) =\u0026gt; a.num \u0026gt; b.num) console.log(sorted) \u0026gt; [ { num: 1 }, { num: 3 }, { num: 2 } ] It turns out that in Node.js and Deno (both use V8), Array.sort() takes only numbers. While in Firefox, Array.sort() can take both.\nArray.sort() in TypeScript In TypeScript, Array.sort() is\n(method) Array\u0026lt;T\u0026gt;.sort(compareFn?: ((a: T, b: T) =\u0026gt; number) | undefined): T[] Try to use boolean values in Array.sort(), but Typescript throws error:\nArgument of type \u0026#39;(a: { num: number; }, b: { num: number; }) =\u0026gt; boolean\u0026#39; is not assignable to parameter of type \u0026#39;(a: { num: number; }, b: { num: number; }) =\u0026gt; number\u0026#39;. Type \u0026#39;boolean\u0026#39; is not assignable to type \u0026#39;number\u0026#39;.ts(2345) Array.sort() in MDN and ECMA Let\u0026rsquo;s check out the document on MDN1, it says\nSo, the compare function has the following form:\nfunction compare(a, b) { if (a is less than b by some ordering criterion) { return -1; } if (a is greater than b by the ordering criterion) { return 1; } // a must be equal to b return 0; } The document doesn\u0026rsquo;t indicate the sort() can take boolean values. Continue to check out the ECMA standard2, which says\nIf x and y are both undefined, return +0ùîΩ. If x is undefined, return 1ùîΩ. If y is undefined, return -1ùîΩ. If comparefn is not undefined, then Let v be ? ToNumber(? Call(comparefn, undefined, ¬´ x, y ¬ª)). If v is NaN, return +0ùîΩ. Return v. Let xString be ? ToString(x). Let yString be ? ToString(y). Let xSmaller be ! IsLessThan(xString, yString, true). If xSmaller is true, return -1ùîΩ. Let ySmaller be ! IsLessThan(yString, xString, true). If ySmaller is true, return 1ùîΩ. Return +0ùîΩ. It also doesn\u0026rsquo;t point out the sort() can take boolean values.\nSummary Array.sort() in Firefox can take boolean values, but there is no relevant description in documents. It may just be an implementation difference that probably not causing bugs.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.sort\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://jasondg.github.io/en/posts/firefox.sort.by.boolean/","summary":"Once I was debugging, I found that in Firefox Array.sort() can take boolean values in addition to number values. However, in Node.js Array.sort() only supports number values. Although it didn\u0026rsquo;t cause bugs, I\u0026rsquo;m curious about the difference.\nDifference between JS engines Here are some tests:\nFirefox const arr = [{num:1}, {num:3}, {num:2}] const numSorted = arr.sort((a, b) =\u0026gt; a.num - b.num) console.log(numSorted) \u0026gt; Array [Object { num: 1 }, Object { num: 2 }, Object { num: 3 }] const arr = [{num:1}, {num:3}, {num:2}] const boolSorted = arr.","title":"Array.sort() in Firefox can use boolean values for judgment"}]